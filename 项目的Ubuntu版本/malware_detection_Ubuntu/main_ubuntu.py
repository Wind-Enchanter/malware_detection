import PySimpleGUI as sg
import predict_api
import predict_traffic
import numpy as np
import os
import hashlib
import _thread
from cuckoo_report_analyzer.move_report import move_1
from cuckoo_report_analyzer.split_reports import split_1
import cuckoo_thread

# sg.theme('Reddit')   # Add a touch of color
sg.theme('Material1')
program_folder = '/home/enchanter/malware_detection-main/'


def file_hash(file_path: str, hash_method) -> str:
    if not os.path.isfile(file_path):
        print('file not exist')
        return ''
    h = hash_method()
    with open(file_path, 'rb') as f:
        while True:
            b = f.read(8192)
            if not b:
                break
            h.update(b)
    return h.hexdigest()


def get_hash(json_path: str) -> str:
    return file_hash(json_path, hashlib.sha256)


def draw_window() -> sg.Window:
    BORDER_COLOR = '#C7D5E0'
    DARK_HEADER_COLOR = 'white'
    BPAD_TOP = ((20, 20), (20, 10))
    BPAD_LEFT = ((20, 10), (0, 10))
    BPAD_LEFT_INSIDE = (0, 10)
    BPAD_RIGHT = ((10, 20), (10, 20))

    top_banner = [[sg.Text('malware detection', font='Any 20', background_color=DARK_HEADER_COLOR)]]
    bottom_banner = [[sg.Text('log file：./log.csv', background_color=DARK_HEADER_COLOR)]]

    top = [
        [sg.Text('--Malware Detection--', size=(50, 1), justification='center', pad=BPAD_TOP, font='Any 20')],
        [sg.Text('please input file name（e.g. xx.exe)')],
        [sg.Text('file name: '), sg.InputText(key='file_name')]]

    block_2 = [[sg.Text('get report dynamically', font='Any 20')],
               [sg.T('')],
               [sg.T('Please enter file path. (Analysis may takes 1min)')],
               [sg.Text('file path: '),
                sg.InputText(key='file_path'),
                sg.FileBrowse(key='file_path_browse', target='file_path', file_types=(("exe files", "*.exe"),))],
               [sg.Text('information: ')],
               [sg.Text(key='information')],
               [sg.Button('submit_to_cuckoo'), sg.Button('report?'),
                sg.Button('json_file?'), sg.Button('submit_to_model')]]

    block_3 = [[sg.Text('Based on API calls, the result is：', font='Any 15')],
               [sg.Text(' ' * 5), sg.Text(key='api_result', font='Any 15')]]

    block_4 = [[sg.Text('Traffic', font='Any 20')],
               [sg.T('')],
               [sg.T('please enter traffic file path')],
               [sg.Text('traffic file path: '), sg.InputText(key='traffic_file_path')],
               [sg.FileBrowse(key='traffic_browse', target='traffic_file_path', file_types=(("png files", "*.png"),)),
                sg.Button('submit_traffic'), sg.Button('refresh_pic')],
               [sg.Image(key='traffic_pic')],
               [sg.Text('Based on traffic images, the result is：', font='Any 15')],
               [sg.Text(' ' * 5), sg.Text(key='traffic_result', font='Any 15')],
               ]

    layout = [
        # [sg.Column(top_banner, size=(960, 40), pad=(0, 0), background_color=DARK_HEADER_COLOR)],
        [sg.Column(top, size=(1010, 120), pad=BPAD_TOP)],
        [sg.Column([[sg.Column(block_2, size=(500, 210), pad=BPAD_LEFT_INSIDE)],
                    [sg.Column(block_3, size=(500, 90), pad=BPAD_LEFT_INSIDE)]], pad=BPAD_LEFT,
                   background_color=BORDER_COLOR),
         sg.Column(block_4, size=(490, 320), pad=BPAD_RIGHT)
         ],
        [sg.Column(bottom_banner, size=(1050, 30), pad=(0, 0), background_color=DARK_HEADER_COLOR)]
    ]

    window = sg.Window('malware detection based on dynamic features', layout, element_justification='center', margins=(0, 0),
                       background_color=BORDER_COLOR,
                       no_titlebar=False, grab_anywhere=True)
    return window


def main():
    my_window = draw_window()
    file_name = ''
    json_file_path = ''
    traffic_pic_path = ''

    while True:  # Event Loop
        event, values = my_window.read()
        if event == sg.WIN_CLOSED or event == 'Exit':
            break

        if event == 'submit_to_cuckoo':
            file_name = values['file_name']
            # terminal commands, need value['file_path']
            # cmd_submit = 'cuckoo submit --timeout 60 ' + '\'' + values['file_path'] + '\''
            cmd_submit = 'cuckoo submit ' + '\'' + values['file_path'] + '\''
            os.system(cmd_submit)
            _thread.start_new_thread(cuckoo_thread.run_and_process, ())
            my_window['information'].update('already submitted to cuckoo')

        if event == 'report?':
            report_path = '/home/enchanter/.cuckoo/storage/analyses/1/reports/report.json'
            report_path_2 = '/home/enchanter/malware_detection-main/cuckoo_report_analyzer/report/1_report.json'
            if os.path.isfile(report_path) or os.path.isfile(report_path_2):
                if os.path.isfile(report_path):
                    move_1()
                    split_1()
                    cmd_stop = 'pkill cuckoo'
                    os.system(cmd_stop)
                    cmd_restore = 'cuckoo clean'
                    # os.popen(cmd_restore)
                    os.system(cmd_restore)

                my_window['information'].update('report has already been saved in\n'
                                                '/mnt/hgfs/Ubuntu-file/malware_detection_Ubuntu'
                                                '/cuckoo_report_analyzer\n/report/1_report.json')
            else:
                my_window['information'].update('report has not been saved yet')

        if event == 'json_file?':
            file_name = values['file_name']
            json_file_path = program_folder + 'cuckoo_report_analyzer/storage/' + file_name + '/processes.json'
            if not os.path.isfile(json_file_path):
                my_window['information'].update('json file has\'t been saved yet')
            else:
                my_window['information'].update('json file has already been saved in\n'
                                                + program_folder + 'cuckoo_report_analyzer\n/storage/' + file_name +
                                                '/processes.json')

        if event == 'submit_to_model':
            file_name = values['file_name']
            # terminal commands, need value['file_path']
            json_file_path = program_folder + 'cuckoo_report_analyzer/storage/' + file_name + '/processes.json'
            # pred = predict_api.api_predict('./api_reader/api.csv', json_file_path,
            pred = predict_api.api_predict('./api_reader/ApiIndex.csv', json_file_path,
                                           # './classification_api/behavioral-malware-detection-based-on-api-calls_model.h5')
                                           './classification_api/new-api-calls_model.h5')
            if pred[0] == 2:
                my_window['api_result'].update('NOT SURE')
            else:
                if pred[0] == 0:
                    my_window['api_result'].update('BENIGN')
                else:
                    my_window['api_result'].update('MALWARE')
            csv_path = './log.csv'
            csv_file = open(csv_path, 'a')
            csv_file.write(
                'API,' + file_name + ',' + str(get_hash(json_file_path)) + ',' + str(np.argmax([pred[0]])) + '\n')
            csv_file.close()

        if event == 'submit_traffic':
            file_name = values['file_name']
            traffic_pic_path = values['traffic_file_path']
            my_window['traffic_pic'].update(filename=traffic_pic_path)

            model_p = './classification_traffic/traffic_class.h5'
            pic = predict_traffic.load_traffic_data(traffic_pic_path)
            pred = predict_traffic.traffic_predict(pic, model_p)
            if np.argmax([pred[0]]) == 0:
                my_window['traffic_result'].update('BENIGN')
            else:
                my_window['traffic_result'].update('MALWARE')
            # 写入日志
            csv_path = './log.csv'
            csv_file = open(csv_path, 'a')
            csv_file.write(
                'Traffic,' + file_name + ',' + str(get_hash(traffic_pic_path)) + ',' + str(np.argmax([pred[0]])) + '\n')
            csv_file.close()

        if event == 'refresh_pic':
            traffic_pic_path = values['traffic_file_path']
            my_window['traffic_pic'].update(filename=traffic_pic_path)

    my_window.close()


if __name__ == "__main__":
    main()
