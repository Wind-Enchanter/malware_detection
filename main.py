import PySimpleGUI as sg
import predict_api
import predict_traffic
import numpy as np

# sg.theme('Reddit')   # Add a touch of color
sg.theme('LightBlue')


def draw_window() -> sg.Window:
    BORDER_COLOR = '#C7D5E0'
    DARK_HEADER_COLOR = 'white'
    BPAD_TOP = ((20, 20), (20, 10))
    BPAD_LEFT = ((20, 10), (0, 10))
    BPAD_LEFT_INSIDE = (0, 10)
    BPAD_RIGHT = ((10, 20), (10, 20))

    top_banner = [[sg.Text('恶意代码检测', font='Any 20', background_color=DARK_HEADER_COLOR)]]
    bottom_banner = [[sg.Text('日志文件：/xx/yy.csv', background_color=DARK_HEADER_COLOR)]]

    top = [[sg.Text('请输入被检测文件名（e.g. xx.exe)', size=(50, 1), justification='c', pad=BPAD_TOP, font='Any 20')],
           [sg.Text('file name: '), sg.InputText(key='file_name')]]

    block_2 = [[sg.Text('动态获取运行报告', font='Any 20')],
               [sg.T('')],
               [sg.T('请输入被检测文件路径,生成报告时长预计1min')],
               [sg.Text('file path: '), sg.InputText(key='file_path')],
               [sg.Text('json file path: ')],
               [sg.Text(key='json_file_path')],
               [sg.Button('show json file path'), sg.Button('refresh_1'), sg.Button('submit_to_model')]]

    block_3 = [[sg.Text('基于API调用序列，文件被判定为：', font='Any 20')],
               [sg.Text(' ' * 5), sg.Text(key='api_result', font='Any 15')]]

    # 流量处理的部分，后续添加，目前只实现直接对流量图片分类
    # block_4 = [[sg.Text('流量处理&检测', font='Any 20')],
    #            [sg.T('')],
    #            [sg.T('请输入被检测流量文件路径')],
    #            [sg.Text('traffic file path: '), sg.InputText(key='traffic_path')],
    #            [sg.Button('submit_traffic'), sg.Button('Refresh_2')],
    #            [sg.Image(key='traffic_pic')],
    #            [sg.Text('基于会话流量，文件被判定为：', font='Any 20')],
    #            [sg.Text('BENIGN', key='traffic_result', font='Any 15')],
    #            ]

    block_4 = [[sg.Text('流量处理&检测', font='Any 20')],
               [sg.T('')],
               [sg.T('请输入被检测流量文件路径')],
               [sg.Text('traffic file path: '), sg.InputText(key='traffic_file_path')],
               [sg.Button('submit_traffic'), sg.Button('refresh_2')],
               [sg.Image(key='traffic_pic')],
               [sg.Text('基于会话流量，文件被判定为：', font='Any 20')],
               [sg.Text(' ' * 5), sg.Text(key='traffic_result', font='Any 15')],
               ]

    layout = [
        # [sg.Column(top_banner, size=(960, 40), pad=(0, 0), background_color=DARK_HEADER_COLOR)],
        [sg.Column(top, size=(920, 90), pad=BPAD_TOP)],
        [sg.Column([[sg.Column(block_2, size=(450, 210), pad=BPAD_LEFT_INSIDE)],
                    [sg.Column(block_3, size=(450, 90), pad=BPAD_LEFT_INSIDE)]], pad=BPAD_LEFT,
                   background_color=BORDER_COLOR),
         sg.Column(block_4, size=(450, 320), pad=BPAD_RIGHT)
         ],
        [sg.Column(bottom_banner, size=(960, 30), pad=(0, 0), background_color=DARK_HEADER_COLOR)]
    ]

    window = sg.Window('malware detection based on dynamic features', layout, margins=(0, 0),
                       background_color=BORDER_COLOR,
                       no_titlebar=False, grab_anywhere=True)
    return window


if __name__ == "__main__":
    my_window = draw_window()
    file_name = ''
    json_file_path = ''
    traffic_pic_path = ''

    while True:  # Event Loop
        event, values = my_window.read()
        if event == sg.WIN_CLOSED or event == 'Exit':
            break

        if event == 'show json file path':
            file_name = values['file_name']
            # terminal commands, need value['file_path']
            json_file_path = 'D:\\VMShare\\cuckoo_report_analyzer-master\\storage\\' + file_name + '\\processes.json'
            my_window['json_file_path'].update(json_file_path)

        if event == 'refresh_1':
            # if 找json_file能找到
            my_window['json_file_path'].update('already saved')
            # else: continue

        if event == 'submit_to_model':
            pred = predict_api.api_predict('./api_reader/api.csv', json_file_path,
                                           './classification_api/behavioral-malware-detection-based-on-api-calls_model.h5')
            if np.argmax([pred[0]]) == 0:
                my_window['api_result'].update('BENIGN')
            else:
                my_window['api_result'].update('MALWARE')

        if event == 'submit_traffic':
            model_p = './classification_traffic/traffic_class.h5'
            traffic_pic_path = values['traffic_file_path']
            my_window['traffic_pic'].update(filename=traffic_pic_path)
            pic = predict_traffic.load_traffic_data(traffic_pic_path)
            pred = predict_traffic.traffic_predict(pic, model_p)
            if np.argmax([pred[0]]) == 0:
                my_window['traffic_result'].update('BENIGN')
            else:
                my_window['traffic_result'].update('MALWARE')

        if event == 'refresh_2':
            my_window['traffic_pic'].update(filename=traffic_pic_path)

    my_window.close()
